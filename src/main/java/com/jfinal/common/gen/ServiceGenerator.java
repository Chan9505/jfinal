package com.jfinal.common.gen;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.generator.TableMeta;

public class ServiceGenerator {
	
	Date date = new Date();
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
    protected String packageTemplate =
        "package %s;%n%n";
    protected String importTemplate =
        "import %s.%s;%n";
    protected String classDefineTemplate =
        "/**%n" +
        " * Generated by lee.  " +sdf.format(date)+
        " %n" +
        " */%n" +
        "public class %s extends ServiceBase<%s> {%n";
    protected String daoTemplate =
                    "\t@Override%n"
                    + "\tpublic %s getDao() {%n\t\treturn %s.dao;%n\t}%n";
    protected String modelPackageName;
    protected String servicePackageName;
    protected String serviceOutputDir;
    protected boolean extendServiceBase = true;
    
    public ServiceGenerator(String servicePackageName, String modelPackageName, String serviceOutputDir) {
        if (StrKit.isBlank(servicePackageName)) {
            throw new IllegalArgumentException("servicePackageName can not be blank.");
        }
        if (servicePackageName.contains("/") || servicePackageName.contains("\\")) {
            throw new IllegalArgumentException("servicePackageName error : " + servicePackageName);
        }
        if (StrKit.isBlank(serviceOutputDir)) {
            throw new IllegalArgumentException("serviceOutputDir can not be blank.");
        }
        
        this.servicePackageName = servicePackageName;
        this.modelPackageName = modelPackageName;
        this.serviceOutputDir = serviceOutputDir;
    }
    
    public void setGenerateDaoInModel(boolean extendServiceBase) {
        this.extendServiceBase = extendServiceBase;
    }
    
    public void generate(List<TableMeta> tableMetas) {
        System.out.println("Generate service ...");
        System.out.println("Service Output Dir: " + serviceOutputDir);
        Map<String, String> contentMap = new HashMap<>();
        for (TableMeta tableMeta : tableMetas) {
            System.out.println("name:" + tableMeta.modelName + "Service");
            System.out.println("content:" + genServiceContent(tableMeta));
            contentMap.put(tableMeta.modelName + "Service", genServiceContent(tableMeta));
        }
        writeToFile(contentMap);
    }
    
    protected String genServiceContent(TableMeta tableMeta) {
        StringBuilder ret = new StringBuilder();
        genPackage(ret);
        genImport(tableMeta, ret);
        genClassDefine(tableMeta, ret);
        genDao(tableMeta, ret);
        ret.append(String.format("}%n"));
        return ret.toString();
       // tableMeta.serviceContent = ret.toString();
    }
    
    protected void genPackage(StringBuilder ret) {
        ret.append(String.format(packageTemplate, servicePackageName));
    }
//    
    protected void genImport(TableMeta tableMeta, StringBuilder ret) {
        ret.append(String.format(importTemplate, modelPackageName, tableMeta.modelName));
        ret.append("import com.jfinal.base.ServiceBase;");
        ret.append(String.format("%n%n"));
    }
//    
    protected void genClassDefine(TableMeta tableMeta, StringBuilder ret) {
        ret.append(String.format(classDefineTemplate, tableMeta.modelName + "Service", tableMeta.modelName));
    }
    
    protected void genDao(TableMeta tableMeta, StringBuilder ret) {
        if (extendServiceBase) {
            ret.append(String.format(daoTemplate, tableMeta.modelName, tableMeta.modelName));
        } else {
            ret.append(String.format("\t%n"));
        }
    }
    
    protected void writeToFile(Map<String, String> contentMap) {
        try {
            for (String serviceName : contentMap.keySet()) {
                writeToFile(serviceName, contentMap.get(serviceName));
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
    
    /**
     * 若 service 文件存在，则不生成，以免覆盖用户手写的代码
     */
    protected void writeToFile(String serviceName, String content) throws IOException {
        File dir = new File(serviceOutputDir);
        if (!dir.exists()) {
            dir.mkdirs();
        }
        
        String target = serviceOutputDir + File.separator + serviceName + ".java";
        
        File file = new File(target);
        if (file.exists()) {
            return ;    // 若 Model 存在，不覆盖
        }
        
        FileWriter fw = new FileWriter(file);
        try {
            fw.write(content);
        }
        finally {
            fw.close();
        }
    }
}
